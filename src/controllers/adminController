// src/controllers/adminController.js
const User = require('../models/User');

//ADMIN ONLY

// Fetch all users
exports.getAllUsers = async (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ error: 'Unauthorized' });
  }

  try {
    const users = await User.find({}).select('-password'); // Exclude passwords
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Delete a user
exports.deleteUser = async (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ error: 'Unauthorized' });
  }

  try {
    // Prevent admin from deleting themselves
    if (req.user.id === req.params.id) {
      return res.status(403).json({ error: 'You cannot delete your own account.' });
    }

    const user = await User.findByIdAndDelete(req.params.id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    res.json({ message: 'User deleted successfully' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Restore failed enrichment games for retry
exports.restoreFailedGames = async (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ error: 'Unauthorized' });
  }

  try {
    const GameService = require('../services/gameService');
    const restoredCount = await GameService.restoreFailedGames();

    res.json({
      message: `Successfully restored ${restoredCount} failed games for retry`,
      restoredCount
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Force enrichment of all unenriched games
exports.forceGameEnrichment = async (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ error: 'Unauthorized' });
  }

  try {
    const GameService = require('../services/gameService');

    // Get all unenriched games
    const unenrichedGames = await GameService.findUnenrichedGames(1000); // Large limit for admin

    if (unenrichedGames.length === 0) {
      return res.json({
        message: 'No unenriched games found',
        enrichedCount: 0
      });
    }

    // Force enrichment
    const enrichedCount = await GameService.enrichGamesBatch(unenrichedGames, 'admin-forced');

    res.json({
      message: `Successfully enriched ${enrichedCount}/${unenrichedGames.length} games`,
      enrichedCount,
      totalGames: unenrichedGames.length
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Get game database statistics
exports.getGameStats = async (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ error: 'Unauthorized' });
  }

  try {
    const GameService = require('../services/gameService');
    const stats = await GameService.getGameStats();

    // Add additional statistics
    const Game = require('../models/Game');

    const totalGames = await Game.countDocuments();
    const failedGames = await Game.countDocuments({ igdbId: -1 });
    const unenrichedGames = await Game.countDocuments({
      $or: [
        { igdbId: { $exists: false } },
        { igdbId: null }
      ],
      igdbId: { $ne: -1 }
    });
    const enrichedGames = totalGames - failedGames - unenrichedGames;

    res.json({
      totalGames,
      enrichedGames,
      unenrichedGames,
      failedGames,
      successRate: totalGames > 0 ? ((enrichedGames / totalGames) * 100).toFixed(1) : 0,
      ...stats
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Drop games collection only (keeps users intact)
exports.dropGamesCollection = async (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ error: 'Unauthorized' });
  }

  try {
    const Game = require('../models/Game');
    await Game.deleteMany({}); // Delete all games but keep the collection

    res.json({
      message: 'Games collection cleared successfully. All games have been deleted, but users remain intact.',
      warning: 'Game data cannot be recovered!'
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Scan all users and sync their games to the game database
exports.scanAllUsersGames = async (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ error: 'Unauthorized' });
  }

  try {
    const GameService = require('../services/gameService');
    const User = require('../models/User');

    // Get all users
    const users = await User.find({});
    console.log(`Found ${users.length} users to scan`);

    let totalGamesAdded = 0;
    let totalGamesRemoved = 0;
    let totalEnriched = 0;

    // Process each user
    for (const user of users) {
      try {
        console.log(`Processing user: ${user.name} (${user._id})`);

        // Get user's games from their profile
        const userGames = user.games || [];

        if (userGames.length === 0) {
          console.log(`User ${user.name} has no games`);
          continue;
        }

        console.log(`User ${user.name} has ${userGames.length} games`);

        // Add this user's games to the game database (without enrichment)
        const result = await GameService.addGamesToDatabase(user._id, userGames);

        totalGamesAdded += result.added;
        totalGamesRemoved += result.removed;
        totalEnriched += result.enriched;

        console.log(`User ${user.name}: +${result.added} -${result.removed} enriched: ${result.enriched}`);

      } catch (userError) {
        console.error(`Error processing user ${user.name}:`, userError.message);
        // Continue with other users
      }
    }

    res.json({
      message: `Successfully scanned ${users.length} users`,
      usersProcessed: users.length,
      totalGamesAdded,
      totalGamesRemoved,
      totalEnriched,
      summary: `Added ${totalGamesAdded}, Removed ${totalGamesRemoved}, Enriched ${totalEnriched} games`
    });

  } catch (error) {
    console.error('Error scanning all users games:', error);
    res.status(500).json({ error: error.message });
  }
};
